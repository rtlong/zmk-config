#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define CT(x) &cmd_hold LG(x) x;
#define MEH LA(LC(LSHIFT));

&mt {
    tapping-term-ms = <300>;
};
&lt {
    tapping-term-ms = <300>;
};
&sk {
    quick-release;
};

/ {
    macros {
        space_space: space_space {
            compatible = "zmk,behavior-macro";
            label = "ZM_my_macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <40>;
            bindings = <&kp SPACE &kp SPACE>;
        };
    };

    behaviors {
        ht_tp: hold_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cmd_hold: command_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CMD_HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td_spc: tap_dance_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SPC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&ht_tp LCMD SPACE>, <&ht_tp LG(SPACE) &space_space>;
        };

        td_q: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Q";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&cmd_hold LG(Q) Q>, <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = \
      // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   <&trans    &td_q          CT(W)         CT(F)         CT(P)        CT(B)             CT(J)          CT(L)        CT(U)          CT(Y)        CT(BSPC)        &trans>,
      // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   <&trans    CT(A)          CT(R)         CT(S)         CT(T)        CT(G)             CT(M)          CT(N)        CT(E)          CT(I)         CT(O)          &trans>,
      // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   <&trans    CT(Z)          CT(X)         CT(C)         CT(D)        CT(V)             CT(K)          CT(H)        CT(COMMA)     CT(DOT)       CT(FSLH)        &trans>,
      // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                          <&kp MEH      &td_spc     &sk LSHIFT         &sk LALT       &sl 1        &sk RCTRL>;
      //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
        };
        numpad_layer {
            bindings = <
      // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   &trans    &kp N1        &kp N2         &kp N3       &kp N4        &kp N5            &kp N6         &kp N7       &kp N8       &kp N9        &kp N0           &trans
      // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &trans    &kp ESC       &kp SEMI       &kp DEL      &kp GRAVE     &kp BSLH          &kp PG_UP      &kp HOME     &kp UP       &kp END        &kp MINUS       &trans
      // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &trans    &none         &none          &kp LBKT     &kp RBKT      &none             &kp PG_DN      &kp LEFT     &kp DOWN     &kp RIGHT      &kp EQUAL       &trans
      // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                          &none        &trans        &trans            &trans         &trans       &to 0
      //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
            >;
        };
//         media_layer {
//             bindings = <
//       // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//    &trans    &kp N1        &kp N2        &kp ESC       &kp N3       &kp N4          &bt BT_SEL 1  &bt BT_SEL 2   &kp C_MUTE   &bt BT_SEL 3   &bt BT_CLR         &trans
//       // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//    &trans    &kp M         &kp Q         &kp W         &kp E        &td0                &kp TAB      &none       &kp C_VOL_UP     &none        &none            &trans
//       // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//    &trans    &kp Z         &kp A         &kp S         &kp D        &kp F               &none        &kp LEFT    &kp C_VOL_DN    &kp RIGHT     &none            &trans
//       // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                          &mt B C       &mt LALT V   &kp SPACE           &kp BSPC      &to 0       &trans
//       //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
//             >;
//         };
    };
};
